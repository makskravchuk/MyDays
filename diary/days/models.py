from django.contrib.auth.models import User
from django.db import models


class Day(models.Model):
    PUBLIC = "public"
    PRIVATE = "private"
    ACCESS_MODE_CHOICES = (
        (PUBLIC, "–ø—É–±–ª—ñ—á–Ω–∏–π"),
        (PRIVATE, "–ø—Ä–∏–≤–∞—Ç–Ω–∏–π"),
    )

    DAY_TYPE_CHOICES = (
        ("special", "–æ—Å–æ–±–ª–∏–≤–∏–π"),
        ("successful", "—É—Å–ø—ñ—à–Ω–∏–π"),
        ("ordinary", "–∑–≤–∏—á–∞–π–Ω–∏–π"),
        ("boring", "–Ω—É–¥–Ω–∏–π"),
        ("bad", "–ø–æ–≥–∞–Ω–∏–π"),
    )

    FEELING_CHOICES = (
        ("excellent", "–≤—ñ–¥–º—ñ–Ω–Ω–µ"),
        ("good", "–¥–æ–±—Ä–µ"),
        ("average", "—Å–µ—Ä–µ–¥–Ω—î"),
        ("poor", "–ø–æ–≥–∞–Ω–µ"),
        ("critical", "–∫—Ä–∏—Ç–∏—á–Ω–µ"),
    )
    DAY_TYPE_EMOJI = {
        "special": "üíñ",
        "successful": "üèÜ",
        "ordinary": "üè°",
        "boring": "üò¥",
        "bad": "üòû",
    }

    user = models.ForeignKey(User, on_delete=models.CASCADE)
    date = models.DateField()
    title = models.CharField(max_length=100, null=True, blank=True)
    image_title = models.ImageField(
        upload_to="images/days_image_titles/", null=True, blank=True
    )
    text_description = models.TextField(null=True, blank=True)
    feeling = models.CharField(
        max_length=10, choices=FEELING_CHOICES, null=True, blank=True
    )
    access_mode = models.CharField(
        max_length=10, choices=ACCESS_MODE_CHOICES, default=PRIVATE
    )
    day_type = models.CharField(
        max_length=15, choices=DAY_TYPE_CHOICES, default="ordinary"
    )
    conclusion = models.TextField(null=True, blank=True)
    updated = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = ("user", "date")

    def __str__(self):
        return f"{self.user} | {self.date}"

    @property
    def images(self):
        return self.mediacontent_set.filter(content_type="image")

    @property
    def videos(self):
        return self.mediacontent_set.filter(content_type="video")

    @property
    def audio(self):
        return self.mediacontent_set.filter(content_type="audio")

    @property
    def access_modes_list(self):
        return [mode[1] for mode in self.ACCESS_MODE_CHOICES]

    @classmethod
    def day_types_list(cls):
        return [
            f"{cls.DAY_TYPE_EMOJI[day_type[0]]} {day_type[1]}"
            for day_type in cls.DAY_TYPE_CHOICES
        ]

    @classmethod
    def day_type_labels(cls):
        return [day_type[1] for day_type in cls.DAY_TYPE_CHOICES]

    @classmethod
    def feelings_list(cls):
        return [feeling[1] for feeling in cls.FEELING_CHOICES]

    @property
    def day_type_emoji(self):
        return self.DAY_TYPE_EMOJI[self.day_type]

    @property
    def feeling_description(self):
        match self.feeling:
            case "excellent":
                return (
                    "–£ –º–µ–Ω–µ –≤–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –µ–Ω–µ—Ä–≥—ñ—ó, –≤—ñ–¥–º—ñ–Ω–Ω–∞ —Ñ—ñ–∑–∏—á–Ω–∞ —Ç–∞ –ø—Å–∏—Ö—ñ—á–Ω–∞ –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å. "
                    "–í—Å—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ —Ñ—ñ–∑—ñ–æ–ª–æ–≥—ñ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –∑–Ω–∞—Ö–æ–¥—è—Ç—å—Å—è –≤ –Ω–æ—Ä–º—ñ. –Ø —î –∞–∫—Ç–∏–≤–Ω–∏–º —ñ "
                    "–∑–¥–∞—Ç–Ω–∏–º –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –±—É–¥—å-—è–∫–∏—Ö —Ñ—ñ–∑–∏—á–Ω–∏—Ö —Ç–∞ —Ä–æ–∑—É–º–æ–≤–∏—Ö –∑–∞–≤–¥–∞–Ω—å."
                )
            case "good":
                return (
                    "–Ø –ø–æ—á—É–≤–∞—é —Å–µ–±–µ –¥–æ–±—Ä–µ, –∑–¥–æ—Ä–æ–≤'—è –≤–∑–∞–≥–∞–ª—ñ –Ω–µ –∑–∞–≤–∞–∂–∞—î –ø–æ–≤—Å—è–∫–¥–µ–Ω–Ω–∏–º —Å–ø—Ä–∞–≤–∞–º. "
                    "–ú–æ–∂–ª–∏–≤–æ, —î –¥—Ä—ñ–±–Ω—ñ –Ω–µ–∑–Ω–∞—á–Ω—ñ –Ω–µ–ø—Ä–∏—î–º–Ω–æ—Å—Ç—ñ, "
                    "–∞–ª–µ –≤–æ–Ω–∏ –Ω–µ –≤–ø–ª–∏–≤–∞—é—Ç—å –∑–Ω–∞—á–Ω–æ –Ω–∞ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –∑–¥–æ—Ä–æ–≤'—è."
                )
            case "average":
                return (
                    "–í—ñ–¥—á—É–≤–∞—é –¥–µ—è–∫—ñ –æ–∑–Ω–∞–∫–∏ –≤—Ç–æ–º–∏ –∞–±–æ –Ω–µ–≤–µ–ª–∏–∫–æ–≥–æ –Ω–µ–∑–¥—É–∂–∞–Ω–Ω—è. "
                    "–ú—ñ–π –∑–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –∑–∞–¥–æ–≤—ñ–ª—å–Ω–∏–π, "
                    "–∞–ª–µ –º–æ–∂–µ –≤–∏–Ω–∏–∫–∞—Ç–∏ –¥–µ—è–∫–∞ –æ–±–º–µ–∂–µ–Ω—ñ—Å—Ç—å —É –º–æ—ó—Ö —Ñ—ñ–∑–∏—á–Ω–∏—Ö –∞–±–æ –ø—Å–∏—Ö—ñ—á–Ω–∏—Ö –º–æ–∂–ª–∏–≤–æ—Å—Ç—è—Ö."
                )
            case "poor":
                return (
                    "–Ø –≤—ñ–¥—á—É–≤–∞—é –≤–∏—Ä–∞–∂–µ–Ω—ñ —Å–∏–º–ø—Ç–æ–º–∏ –Ω–µ–∑–¥—É–∂–∞–Ω–Ω—è, "
                    "—è–∫—ñ —Å—É—Ç—Ç—î–≤–æ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ –º–æ—î –ø–æ–≤—Å—è–∫–¥–µ–Ω–Ω–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è. "
                    "–ú–æ–∂–ª–∏–≤–µ –≤–∏–Ω–∏–∫–Ω–µ–Ω–Ω—è –±–æ–ª—é, –≤—Ç–æ–º–∏ —Ç–∞ —ñ–Ω—à–∏—Ö –Ω–µ–ø—Ä–∏—î–º–Ω–∏—Ö –≤—ñ–¥—á—É—Ç—Ç—ñ–≤. "
                    "–í–∏–º–∞–≥–∞—î —É–≤–∞–≥–∏ —Ç–∞ –º–æ–∂–ª–∏–≤–æ–≥–æ –ª—ñ–∫—É–≤–∞–Ω–Ω—è."
                )
            case "critical":
                return (
                    "–ú—ñ–π —Å—Ç–∞–Ω –≤–≤–∞–∂–∞—î—Ç—å—Å—è —Ç—è–∂–∫–∏–º. –í–∞–∂–ª–∏–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –º–æ–≥–æ –æ—Ä–≥–∞–Ω—ñ–∑–º—É –ø–æ—Ä—É—à–µ–Ω—ñ,"
                    " —ñ—Å–Ω—É—î —Ä–∏–∑–∏–∫ –º–æ–≥–æ –∂–∏—Ç—Ç—è. –¶–µ –≤–∏–º–∞–≥–∞—î –Ω–µ–≥–∞–π–Ω–æ—ó –º–µ–¥–∏—á–Ω–æ—ó –¥–æ–ø–æ–º–æ–≥–∏ —Ç–∞ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–≥–æ –ª—ñ–∫—É–≤–∞–Ω–Ω—è. "
                    "–¢–∞–∫–∏–π —Å—Ç–∞–Ω –º–æ–∂–µ –±—É—Ç–∏ —Å–ø—Ä–∏—á–∏–Ω–µ–Ω–∏–π —Å–µ—Ä–π–æ–∑–Ω–∏–º–∏ —Ç—Ä–∞–≤–º–∞–º–∏,"
                    " –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è–º–∏ –∞–±–æ —ñ–Ω—à–∏–º–∏ –∫—Ä–∏—Ç–∏—á–Ω–∏–º–∏ —Å—Ç–∞–Ω–∞–º–∏, —â–æ –∑–∞–≥—Ä–æ–∂—É—é—Ç—å –º–æ—î–º—É –∂–∏—Ç—Ç—é."
                )
            case _:
                return "–°–∞–º–æ–ø–æ—á—É—Ç—Ç—è –Ω–µ –≤–∫–∞–∑–∞–Ω–æ."

    @classmethod
    def get_day_search_parameter(cls, search_parameter_display):
        parameters = {
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è": 'title__icontains',
            "–û–ø–∏—Å –¥–Ω—è": 'text_description__icontains',
            "–°–ø–∏—Å–æ–∫ —Å–ø—Ä–∞–≤": 'tasks__description__icontains',
            "–í—ñ–¥–≤—ñ–¥–∞–Ω—ñ –º—ñ—Å—Ü—è": 'visited_places__title__icontains',
            "–ü–æ–≤'—è–∑–∞–Ω—ñ –ª—é–¥–∏": 'related_people__name__icontains',
            "–î–æ—Å—è–≥–Ω–µ–Ω–Ω—è": 'achievements__text__icontains',
            "–ñ–∏—Ç—Ç—î–≤—ñ —É—Ä–æ–∫–∏": 'life_lessons__text__icontains',
            "–í–∏—Å–Ω–æ–≤–∫–∏": 'conclusion__icontains',
        }
        return parameters.get(search_parameter_display, None)


class Mood(models.Model):
    MOOD_EMOJI = {
        "happy": "üòä",
        "in_love": "üòç",
        "confident": "üí™",
        "playful": "üòÑ",
        "distressed": "üòì",
        "indifferent": "üòê",
        "angry": "üò°",
        "fearful": "üò±",
        "sad": "üòî",
        "desperate": "üò≠",
    }

    MOOD_CHOICES = (
        ("happy", "—â–∞—Å–ª–∏–≤–∏–π"),
        ("in_love", "–∑–∞–∫–æ—Ö–∞–Ω–∏–π"),
        ("confident", "–≤–ø–µ–≤–Ω–µ–Ω–∏–π"),
        ("playful", "–≥—Ä–∞–π–ª–∏–≤–∏–π"),
        ("distressed", "–∑–±–µ–Ω—Ç–µ–∂–µ–Ω–∏–π"),
        ("indifferent", "–±–∞–π–¥—É–∂–∏–π"),
        ("angry", "–∑–ª–∏–π"),
        ("fearful", "–Ω–∞–ª—è–∫–∞–Ω–∏–π"),
        ("sad", "—Å—É–º–Ω–∏–π"),
        ("desperate", "–≤—ñ–¥—á–∞–π"),
    )

    day = models.OneToOneField(Day, on_delete=models.CASCADE)
    morning_mood = models.CharField(
        max_length=15, choices=MOOD_CHOICES, null=True, blank=True
    )
    noon_mood = models.CharField(
        max_length=15, choices=MOOD_CHOICES, null=True, blank=True
    )
    evening_mood = models.CharField(
        max_length=15, choices=MOOD_CHOICES, null=True, blank=True
    )
    night_mood = models.CharField(
        max_length=15, choices=MOOD_CHOICES, null=True, blank=True
    )

    updated = models.DateTimeField(auto_now=True)

    @property
    def morning_mood_emoji(self):
        return self.MOOD_EMOJI.get(str(self.morning_mood), "")

    @property
    def noon_mood_emoji(self):
        return self.MOOD_EMOJI.get(str(self.noon_mood), "")

    @property
    def evening_mood_emoji(self):
        return self.MOOD_EMOJI.get(str(self.evening_mood), "")

    @property
    def night_mood_emoji(self):
        return self.MOOD_EMOJI.get(str(self.night_mood), "")

    @classmethod
    def moods_list(cls):
        return [f"{cls.MOOD_EMOJI[mood[0]]} {mood[1]}" for mood in cls.MOOD_CHOICES]


class Task(models.Model):
    TASK_STATUS_CHOICES = (
        ("failed", "–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–æ"),
        ("completed", "–≤–∏–∫–æ–Ω–∞–Ω–æ"),
    )
    day = models.ForeignKey(Day, related_name="tasks", on_delete=models.CASCADE)
    description = models.CharField(max_length=250)
    status = models.CharField(
        max_length=10, choices=TASK_STATUS_CHOICES, null=True, blank=True
    )
    execution_time = models.TimeField()

    class Meta:
        ordering = ["execution_time"]


class Weather(models.Model):
    day = models.OneToOneField(Day, on_delete=models.CASCADE)
    min_temperature = models.IntegerField()
    max_temperature = models.IntegerField()
    description = models.CharField(max_length=30)
    icon_url = models.URLField()


class MusicalComposition(models.Model):
    day = models.ForeignKey(
        Day, related_name="musical_compositions", on_delete=models.CASCADE
    )
    author = models.CharField(max_length=50)
    name = models.CharField(max_length=50)
    updated = models.DateTimeField(auto_now=True)


class RelatedPerson(models.Model):
    day = models.ForeignKey(
        Day, related_name="related_people", on_delete=models.CASCADE
    )
    name = models.CharField(max_length=100)
    updated = models.DateTimeField(auto_now=True)


class Achievement(models.Model):
    day = models.ForeignKey(Day, related_name="achievements", on_delete=models.CASCADE)
    text = models.TextField()
    updated = models.DateTimeField(auto_now=True)


class LifeLesson(models.Model):
    day = models.ForeignKey(Day, related_name="life_lessons", on_delete=models.CASCADE)
    text = models.TextField()
    updated = models.DateTimeField(auto_now=True)


class VisitedPlace(models.Model):
    day = models.ForeignKey(
        Day, related_name="visited_places", on_delete=models.CASCADE
    )
    longitude = models.FloatField()
    latitude = models.FloatField()
    title = models.CharField(max_length=70)
    updated = models.DateTimeField(auto_now=True)


class MediaContent(models.Model):
    IMAGE = "image"
    VIDEO = "video"
    AUDIO = "audio"
    CONTENT_TYPE_CHOICES = (
        (IMAGE, "image"),
        (VIDEO, "video"),
        (AUDIO, "audio"),
    )
    day = models.ForeignKey(Day, on_delete=models.CASCADE)
    content_type = models.CharField(max_length=10, choices=CONTENT_TYPE_CHOICES)
    description = models.CharField(max_length=400, null=True, blank=True)
    file = models.FileField(upload_to="days/media_files/")
    created = models.DateTimeField(auto_now_add=True)
    updated = models.DateTimeField(auto_now=True)
